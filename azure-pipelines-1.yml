# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
variables:
  someName: 'false'

jobs:
- job: PrecheckJob
  pool: Azure Pipelines
  steps:
    - task: Bash@3
      name: preCheckTask
      displayName: "preCheckTask"
      inputs:
        targetType: 'inline'
        script: |
          set -e
          someNamel=true
          curl -o buidjson.json -H "Authorization:Bearer $(System.AccessToken)" "$(System.TeamFoundationCollectionUri)/$(System.TeamProject)/_apis/build/definitions/$(System.DefinitionId)?api-version=5.0"
          python_code=`cat <<EOF
          import json
          import os

          nested_dict = {'variables' : {'someName' : {'value': 'true'}}}
          with open ("buidjson.json", "r+") as file:
              data = json.load(file)
              data.update(nested_dict)
              file.seek(0)
              json.dump(data, file)
          EOF`
          python -c "$python_code"
          cat buidjson.json
          echo "Updating the variable"
          curl -X PUT -H "Authorization: Bearer $(System.AccessToken)" -H "Content-Type: application/json" -d "@buidjson.json" "$(System.TeamFoundationCollectionUri)/$(System.TeamProject)/_apis/build/definitions/$(System.DefinitionId)?api-version=5.0"
          echo $?
          echo "Getting the variables"
          curl -o buidjson1.json -H "Authorization:Bearer $(System.AccessToken)" "$(System.TeamFoundationCollectionUri)/$(System.TeamProject)/_apis/build/definitions/$(System.DefinitionId)?api-version=5.0"
          echo $?
          cat buidjson1.json

- job: RunsOnServer
  dependsOn: [PrecheckJob]
  pool: Server
  condition: eq(variables['someName'], 'true')
  steps:
  - task: Delay@1
    inputs:
      delayForMinutes: '10'

- job: PostcheckJob
  dependsOn: [PrecheckJob,RunsOnServer]
  pool: Azure Pipelines
  steps:
  - task: Bash@3
    name: postcheckTask
    displayName: "postChecktask"
    inputs:
      targetType: 'inline'
      script: |
        set -e
        echo "hello"
